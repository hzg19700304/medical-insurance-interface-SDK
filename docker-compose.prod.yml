# 医保接口SDK生产环境Docker Compose配置
version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: medical_insurance_mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: medical_insurance_sdk
      MYSQL_USER: medical_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./database/setup_database.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./database/schema:/docker-entrypoint-initdb.d/schema
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - medical_network_prod
    secrets:
      - mysql_root_password
      - mysql_password
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/mysql_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: medical_insurance_redis_prod
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - medical_network_prod
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # 医保SDK应用服务
  medical_sdk:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: medical_insurance_sdk_prod
    restart: always
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=medical_user
      - DB_PASSWORD_FILE=/run/secrets/mysql_password
      - DB_DATABASE=medical_insurance_sdk
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - medical_network_prod
    secrets:
      - mysql_password
      - redis_password
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Celery Worker服务
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: medical_insurance_celery_prod
    restart: always
    command: celery -A medical_insurance_sdk.async_processing.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=medical_user
      - DB_PASSWORD_FILE=/run/secrets/mysql_password
      - DB_DATABASE=medical_insurance_sdk
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - medical_network_prod
    secrets:
      - mysql_password
      - redis_password
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "medical_insurance_sdk.async_processing.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: medical_insurance_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - medical_network_prod
    depends_on:
      - medical_sdk
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

# 网络配置
networks:
  medical_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# 数据卷配置
volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local

# 密钥配置
secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  redis_password:
    file: ./secrets/redis_password.txt