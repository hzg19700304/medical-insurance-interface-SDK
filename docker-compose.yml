# 医保接口SDK开发环境Docker Compose配置
version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: medical_insurance_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: wodemima
      MYSQL_DATABASE: medical_insurance_sdk
      MYSQL_USER: medical_user
      MYSQL_PASSWORD: wodemima
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/setup_database.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./database/schema:/docker-entrypoint-initdb.d/schema
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - medical_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pwodemima"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 60s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: medical_insurance_redis
    restart: unless-stopped
    command: redis-server --requirepass wodemima --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "wodemima", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 医保SDK应用服务
  medical_sdk:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medical_insurance_sdk
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=medical_user
      - DB_PASSWORD=wodemima
      - DB_DATABASE=medical_insurance_sdk
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wodemima
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env
    networks:
      - medical_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Celery Worker服务
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medical_insurance_celery
    restart: unless-stopped
    command: celery -A medical_insurance_sdk.async_processing.celery_app worker --loglevel=info
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=medical_user
      - DB_PASSWORD=wodemima
      - DB_DATABASE=medical_insurance_sdk
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wodemima
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env
    networks:
      - medical_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "medical_insurance_sdk.async_processing.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Flower监控服务
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medical_insurance_flower
    restart: unless-stopped
    command: celery -A medical_insurance_sdk.async_processing.celery_app flower --port=5555
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wodemima
    ports:
      - "5555:5555"
    networks:
      - medical_network
    depends_on:
      - redis
      - celery_worker

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: medical_insurance_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - medical_network
    depends_on:
      - medical_sdk

# 网络配置
networks:
  medical_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local